# Template-based VM deployments

locals {
  # Default cloud-init user-data if not specified
  default_user_data = <<-EOF
    #cloud-config
    users:
      - name: ubuntu
        groups: sudo
        shell: /bin/bash
        sudo: ['ALL=(ALL) NOPASSWD:ALL']
        ssh_authorized_keys:
          ${join("\n          ", var.default_ssh_keys)}
    
    package_update: true
    package_upgrade: true
    
    packages:
      - qemu-guest-agent
      - curl
      - vim
      - htop
    
    runcmd:
      - systemctl enable qemu-guest-agent
      - systemctl start qemu-guest-agent
  EOF
  
  # Default meta-data
  default_meta_data = <<-EOF
    instance-id: iid-local01
  EOF
}

# Deploy VMs from templates
module "template_vms" {
  source = "./modules/vm-template"
  
  for_each = var.template_vms
  
  vm_name       = each.key
  template_name = each.value.template_name != "" ? each.value.template_name : var.default_template_name
  cpus          = each.value.cpus
  memory        = each.value.memory
  network_mode  = each.value.network_mode
  linked_clone  = each.value.linked_clone
  auto_start    = each.value.auto_start
  
  # Cloud-init configuration
  cloud_init = each.value.cloud_init || var.enable_cloud_init
  user_data  = each.value.user_data != "" ? each.value.user_data : local.default_user_data
  meta_data  = each.value.meta_data != "" ? each.value.meta_data : "${local.default_meta_data}\nlocal-hostname: ${each.key}"
}

# Deploy VMs from PVM bundles
module "pvm_vms" {
  source = "./modules/vm-template"
  
  for_each = var.pvm_vms
  
  vm_name      = each.key
  pvm_path     = each.value.pvm_path
  cpus         = each.value.cpus
  memory       = each.value.memory
  network_mode = each.value.network_mode
  auto_start   = each.value.auto_start
  
  # Cloud-init configuration
  cloud_init = each.value.cloud_init || var.enable_cloud_init
  user_data  = each.value.user_data != "" ? each.value.user_data : local.default_user_data
  meta_data  = each.value.meta_data != "" ? each.value.meta_data : "${local.default_meta_data}\nlocal-hostname: ${each.key}"
}

# Outputs for template VMs
output "template_vm_info" {
  description = "Information about VMs created from templates"
  value = {
    for k, v in module.template_vms : k => {
      name   = v.vm_name
      uuid   = v.vm_uuid
      status = v.vm_status
      ip     = v.vm_ip
      source = v.source_type
    }
  }
}

output "pvm_vm_info" {
  description = "Information about VMs created from PVM bundles"
  value = {
    for k, v in module.pvm_vms : k => {
      name   = v.vm_name
      uuid   = v.vm_uuid
      status = v.vm_status
      ip     = v.vm_ip
      source = v.source_type
    }
  }
}

# Generate SSH config
resource "local_file" "ssh_config" {
  count = length(module.template_vms) > 0 ? 1 : 0
  
  filename = "${path.module}/ssh_config"
  content  = <<-EOF
    # SSH configuration for template VMs
    # Generated by OpenTofu
    
    %{ for k, v in module.template_vms ~}
    %{ if v.vm_ip != "" ~}
    Host ${k}
      HostName ${v.vm_ip}
      User ubuntu
      StrictHostKeyChecking no
      UserKnownHostsFile /dev/null
    
    %{ endif ~}
    %{ endfor ~}
    
    %{ for k, v in module.pvm_vms ~}
    %{ if v.vm_ip != "" ~}
    Host ${k}
      HostName ${v.vm_ip}
      User ubuntu
      StrictHostKeyChecking no
      UserKnownHostsFile /dev/null
    
    %{ endif ~}
    %{ endfor ~}
  EOF
}

# Generate Ansible inventory
resource "local_file" "ansible_inventory" {
  count = length(module.template_vms) > 0 ? 1 : 0
  
  filename = "${path.module}/ansible_inventory.yml"
  content  = <<-EOF
    # Ansible inventory for template VMs
    # Generated by OpenTofu
    
    all:
      hosts:
    %{ for k, v in module.template_vms ~}
    %{ if v.vm_ip != "" ~}
        ${k}:
          ansible_host: ${v.vm_ip}
          ansible_user: ubuntu
    %{ endif ~}
    %{ endfor ~}
    %{ for k, v in module.pvm_vms ~}
    %{ if v.vm_ip != "" ~}
        ${k}:
          ansible_host: ${v.vm_ip}
          ansible_user: ubuntu
    %{ endif ~}
    %{ endfor ~}
    
      vars:
        ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
  EOF
}